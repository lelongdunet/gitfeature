#!/bin/bash
#
# Commit hook script for feature management

if git-rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

FINALNAMESPACE='final'
DRAFTNAMESPACE='draft'
STARTNAMESPACE='start'

GITDIR=$(git rev-parse --git-dir)
DEVREF=$(git config workflow.devref)
FEATREBASEDIR=$GITDIR/feat_rebase

#Perform some regular checks
if FETCHINTER=$(git config workflow.fetchinter); then
    FETCHINTER_S=$(($FETCHINTER*3600))
    FETCHAGE=$(($(date +%s) - $(date -r "$GITDIR/FETCH_HEAD" +%s)))
    if [[ $FETCHAGE -gt $FETCHINTER_S ]]; then
        echo "########### -- ERROR -- ###################"
        echo "You made no fetch for more than $FETCHINTER hours"
        echo "You should at least update the main branch $DEVREF"
        echo ""
        echo "If you are really unable to fetch now you can avoid this error by running"
        echo " touch $GITDIR/FETCH_HEAD"
        echo "-------------------------------------------------------------------------"
        exit 1
    fi
fi

#Check if a valid branch is available as head
if CURRENT=$(git symbolic-ref HEAD 2> /dev/null); then
    CURRENTNAMESPACE=$(dirname ${CURRENT##refs/heads/})
    CURRENTBRANCH=${CURRENT##refs/heads/}
    CURRENTFEAT=$(basename $CURRENT)

    if MAINBRANCH="$(git feature _featcache mainbranch "$CURRENTFEAT" 2> /dev/null)"; then
        if ! FEATSTATE="$(git feature _featcache state "$CURRENTFEAT")"; then
            echo "########### -- ERROR -- ###################"
            echo "The feature $CURRENTFEAT seems to be in error"
            echo "Fix it before commiting!"
            echo "###########################################"
            exit 1
        fi

        if [ ! "$FEATSTATE" == 'draft' ]; then
            echo "########### -- ERROR -- ###################"
            echo "The feature $CURRENTFEAT is currently in $FEATSTATE state"
            echo "You should only work in draft feature!"
            echo "###########################################"
            exit 1
        fi

        if [ ! "$CURRENTBRANCH" == "$MAINBRANCH" ]; then
            echo "########### -- ERROR -- ###################"
            echo "This is not the main branch of feature $FEATURE"
            echo "Checkout the main branch : $MAINBRANCH"
            echo "before commiting changes!"
            echo "###########################################"
            exit 1
        fi

        if git feature _featcache isintegrated "$CURRENTFEAT" &> /dev/null; then
            echo "########### -- ERROR -- ###################"
            echo "The feature already integrated"
            echo "It can't be modified any more!"
            echo "###########################################"
            exit 1
        fi

        if ! git feature _featcache isuptodate "$CURRENTFEAT" &> /dev/null; then
            echo "########### -- ERROR -- ###################"
            echo "Your current branch is not up to date"
            echo "Run featupdate before commiting!"
            echo ' > git featupdate'
            echo ""
            echo "###########################################"
            echo "  - You can save your index state using the stash with"
            echo "git stash save --keep-index MYLASTCHANGE"
            echo "git stash save MYLASTINDEX"
            echo ""
            echo "  - Then you will restore your index with"
            echo "git stash apply"
            echo "# > Check there are no conflicts"
            echo "git stash drop"
            echo "git add -u"
            echo "git stash apply"
            echo "# > Check there are no conflicts"
            echo "git stash drop"
            echo ""
            echo "------------------------------------------"
            exit 1
        fi
        $CMDFEATCACHE
    fi
fi

FORBIDFILE='\.orig$|\.backup$'
if git diff-index --cached --name-only $against | egrep "$FORBIDFILE"; then
    echo 'Versionning of files with such name is forbiden'
    exit 1
fi

MERGEMARK=$(git diff --cached -G'^<<<<<<')
if [[ -n "$MERGEMARK" ]]; then
    echo 'The patch you re about to commit seems to contain merge markers'
    echo 'Check your conflicts are correctly ressolved and try again.'
    exit 1
fi


