#!/bin/bash
#
# Rebase hook script for feature management

basebranch="$1"
if test "$#" = 2
then
	CURRENT="refs/heads/$2"
else
    # we do not interrupt rebasing detached HEAD
	CURRENT=`git symbolic-ref HEAD` || exit 0 
fi

FINALNAMESPACE='final'
DRAFTNAMESPACE='draft'
STARTNAMESPACE='start'

GITDIR=$(git rev-parse --git-dir)
DEVREF=$(git config workflow.devref)

FEATREBASEDIR=$GITDIR/feat_rebase

CURRENTBRANCH=${CURRENT##refs/heads/}
CURRENTNAMESPACE=$(dirname $CURRENTBRANCH)
CURRENTFEAT=$(basename $CURRENT)

echo "Your in feature $CURRENTFEAT at $CURRENTNAMESPACE"

#Ensure the hold directory is empty
rm -f "$FEATREBASEDIR"/*

#Check if DEVREF is between the branch and the base (or its fork point from DEVREF line)
basetobranch=$(git rev-list $CURRENTBRANCH ^$basebranch)
branchnodev=$(git rev-list $CURRENTBRANCH ^$DEVREF ^$basebranch)
if [[ "$basetobranch" != "$branchnodev" ]]; then
    echo "########### -- ERROR -- ###################"
    echo "Commits of $DEVREF are in your rebase"
    echo "These commits are not supposed to be rewritten!"
    exit 1
fi

if [[ "$CURRENTNAMESPACE" == "$STARTNAMESPACE" ]]; then
    echo "########### -- ERROR -- ###################"
    echo "Never move nor commit manually this reference, this is a marker automatically managed"
    echo "You must never rebase nor commit in $STARTNAMESPACE/$CURRENTFEAT"
    exit 1
fi

if [[ -n "$INTEGRATION" ]]; then
    echo "$INTEGRATION" > "$FEATREBASEDIR/integration"
    echo "$POSTCHECKOUT" > "$FEATREBASEDIR/postcheckout"
    exit 0
fi

if [[ "$CURRENTNAMESPACE" == "$DRAFTNAMESPACE" || "$CURRENTNAMESPACE" == "$FINALNAMESPACE" ]]; then
    mkdir -p ""$FEATREBASEDIR""
    echo $basebranch > "$FEATREBASEDIR"/basebranch
    echo $CURRENT > "$FEATREBASEDIR"/current
    echo $@ > "$FEATREBASEDIR"/args

    #Check if the base point is between the branch and the DEVREF line
    notindevref=$(git rev-list "$basebranch" "^$DEVREF")
    onlyinbase=$(git rev-list "$basebranch" "^$DEVREF" "^$CURRENTBRANCH")
    starthash=$(git feature _featcache start "$CURRENTFEAT")
    if [ ! "$onlyinbase" == "$notindevref" ]; then
        #The start point does not coincide with devref
        if [[ ! "$starthash" == "$(git rev-parse $basebranch)" ]]; then
            echo "########### -- ERROR -- ###################"
            echo "The feature start point does not feat the base!"
            exit 1
        fi
        echo $STARTNAMESPACE/$CURRENTFEAT > "$FEATREBASEDIR/start"
    elif git rev-parse $STARTNAMESPACE/$CURRENTFEAT &> /dev/null; then
        if [ -n "$(git rev-list $STARTNAMESPACE/$CURRENTFEAT ^$basebranch)" ]; then
            echo "----------- -- WARNING -- -----------------"
            echo "The start point $STARTNAMESPACE/$CURRENTFEAT is not considered"
            echo "BE SURE NOT TO SQUASH, EDIT NOR TO REORDER COMMITS !"
            echo "Press enter to continue ..."
            read
            echo true > "$FEATREBASEDIR/checkorder"
            echo $STARTNAMESPACE/$CURRENTFEAT > "$FEATREBASEDIR/start"
        fi

    fi
    if [ -n "$NEWSTARTPOINT" ]; then
        echo $STARTNAMESPACE/$CURRENTFEAT > "$FEATREBASEDIR/start"
        echo $NEWSTARTPOINT > "$FEATREBASEDIR/newstart"
        echo $starthash > "$FEATREBASEDIR/oldstart"
    fi

    #Record the first commit of the branch
    git rev-list --left-only $CURRENT...$basebranch |sed '$!D' > $FEATREBASEDIR/hashbase
fi

